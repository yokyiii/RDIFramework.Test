#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//	RDIFramework.NET，是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//	RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
// 框架官网：http://www.rdiframework.net/
// 框架博客：http://blog.rdiframework.net/
// 版权所有：海南国思软件科技有限公司
// 交流QQ：406590790 
// 邮件交流：406590790@qq.com
// 其他博客：
//      http://www.cnblogs.com/huyong 
//      http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//	此代码由RDIFramework.NET平台代码生成工具自动生成。
//	运行时版本:4.0.30319.1
//
//	对此文件的更改可能会导致不正确的行为，并且如果
//	重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;
using System.Runtime.Serialization;

namespace RDIFramework.Test
{
    using RDIFramework.BizLogic;
    using RDIFramework.Utilities;

    /// <summary>
    /// InterrogationEntity
    /// 
    /// 
    /// 修改纪录
    /// 
    /// 2020-04-09 版本：3.6 yoky 创建主键。
    /// 
    /// 版本：3.6
    /// 
    /// <author>
    /// <name>yoky</name>
    /// <date>2020-04-09</date>
    /// </author>
    /// </summary>
    public partial class InterrogationEntity : BaseEntity
    {
        /// <summary>
        /// id
        /// </summary>
        [DataMember] 
        public String Id { get; set; } 

        /// <summary>
        /// date
        /// </summary>
        [DataMember] 
        public DateTime? Date { get; set; } 

        /// <summary>
        /// patient_name
        /// </summary>
        [DataMember] 
        public String PatientName { get; set; } 

        /// <summary>
        /// gender
        /// </summary>
        [DataMember] 
        public String Gender { get; set; } 

        /// <summary>
        /// birthday
        /// </summary>
        [DataMember] 
        public DateTime? Birthday { get; set; } 

        /// <summary>
        /// age
        /// </summary>
        [DataMember] 
        public int? Age { get; set; } 

        /// <summary>
        /// occupation
        /// </summary>
        [DataMember] 
        public String Occupation { get; set; } 

        /// <summary>
        /// is_merry
        /// </summary>
        [DataMember] 
        public String IsMerry { get; set; } 

        /// <summary>
        /// skin_color
        /// </summary>
        [DataMember] 
        public String SkinColor { get; set; } 

        /// <summary>
        /// ethnic
        /// </summary>
        [DataMember] 
        public String Ethnic { get; set; } 

        /// <summary>
        /// hight
        /// </summary>
        [DataMember] 
        public String Hight { get; set; } 

        /// <summary>
        /// weight
        /// </summary>
        [DataMember] 
        public String Weight { get; set; } 

        /// <summary>
        /// body_shape
        /// </summary>
        [DataMember] 
        public String BodyShape { get; set; } 

        /// <summary>
        /// temperture
        /// </summary>
        [DataMember] 
        public String Temperture { get; set; } 

        /// <summary>
        /// heartrate
        /// </summary>

        [DataMember] 
        public int? Heartrate { get; set; } 

        /// <summary>
        /// blood_pressure_h
        /// </summary>

        [DataMember] 
        public int? BloodPressureH { get; set; } 

        /// <summary>
        /// blood_pressure_l
        /// </summary>

        [DataMember] 
        public int? BloodPressureL { get; set; } 

        /// <summary>
        /// address
        /// </summary>
        [DataMember] 
        public String Address { get; set; } 

        /// <summary>
        /// zip_code
        /// </summary>

        [DataMember] 
        public String ZipCode { get; set; } 

        /// <summary>
        /// phone_number
        /// </summary>
        [DataMember] 
        public String PhoneNumber { get; set; } 

        /// <summary>
        /// email
        /// </summary>

        [DataMember] 
        public String Email { get; set; } 

        /// <summary>
        /// main_suit
        /// </summary>

        [DataMember] 
        public String MainSuit { get; set; } 

        /// <summary>
        /// current_disease_condition
        /// </summary>

        [DataMember] 
        public String CurrentDiseaseCondition { get; set; } 

        /// <summary>
        /// disease_pattern
        /// </summary>

        [DataMember] 
        public String DiseasePattern { get; set; } 

        /// <summary>
        /// medical_history
        /// </summary>

        [DataMember] 
        public String MedicalHistory { get; set; } 

        /// <summary>
        /// blood_analysis
        /// </summary>

        [DataMember] 
        public String BloodAnalysis { get; set; } 

        /// <summary>
        /// defecation
        /// </summary>

        [DataMember] 
        public String Defecation { get; set; } 

        /// <summary>
        /// liver_kidny
        /// </summary>

        [DataMember] 
        public String LiverKidny { get; set; } 

        /// <summary>
        /// x_ray
        /// </summary>

        [DataMember] 
        public String XRay { get; set; } 

        /// <summary>
        /// b_ultrasonic
        /// </summary>

        [DataMember] 
        public String BUltrasonic { get; set; } 

        /// <summary>
        /// endoscopy
        /// </summary>

        [DataMember] 
        public String Endoscopy { get; set; } 

        /// <summary>
        /// ct
        /// </summary>

        [DataMember] 
        public String Ct { get; set; } 

        /// <summary>
        /// magnetic_resonance
        /// </summary>

        [DataMember] 
        public String MagneticResonance { get; set; } 

        /// <summary>
        /// western_diagnosis
        /// </summary>

        [DataMember] 
        public String WesternDiagnosis { get; set; } 

        /// <summary>
        /// personnal_habit
        /// </summary>

        [DataMember] 
        public String PersonnalHabit { get; set; } 

        /// <summary>
        /// personnal_sentiment
        /// </summary>

        [DataMember] 
        public String PersonnalSentiment { get; set; } 

        /// <summary>
        /// family_history
        /// </summary>

        [DataMember] 
        public String FamilyHistory { get; set; } 

        /// <summary>
        /// is_longterm_hormones
        /// </summary>

        [DataMember] 
        public String IsLongtermHormones { get; set; } 

        /// <summary>
        /// is_amount_anticatarrhals
        /// </summary>
        [DataMember] 
        public String IsAmountAnticatarrhals { get; set; } 

        /// <summary>
        /// drug_allergy
        /// </summary>

        [DataMember] 
        public String DrugAllergy { get; set; } 

        /// <summary>
        /// curretn_drug
        /// </summary>

        [DataMember] 
        public String CurretnDrug { get; set; } 

        /// <summary>
        /// operation_history
        /// </summary>
        [DataMember] 
        public String OperationHistory { get; set; } 

        /// <summary>
        /// 构造函数
        /// </summary>
        public InterrogationEntity()
        {
        }


        /// <summary>
        /// 从数据行读取
        /// </summary>
        /// <param name="dataRow">数据行</param>
        protected override BaseEntity GetFrom(IDataRow dataRow)
        {
            this.Id = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldId]);
            this.Date = BusinessLogic.ConvertToNullableDateTime(dataRow[InterrogationTable.FieldDate]);
            this.PatientName = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldPatientName]);
            this.Gender = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldGender]);
            this.Birthday = BusinessLogic.ConvertToNullableDateTime(dataRow[InterrogationTable.FieldBirthday]);
            this.Age = BusinessLogic.ConvertToNullableInt(dataRow[InterrogationTable.FieldAge]);
            this.Occupation = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldOccupation]);
            this.IsMerry = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldIsMerry]);
            this.SkinColor = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldSkinColor]);
            this.Ethnic = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldEthnic]);
            this.Hight = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldHight]);
            this.Weight = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldWeight]);
            this.BodyShape = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldBodyShape]);
            this.Temperture = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldTemperture]);
            this.Heartrate = BusinessLogic.ConvertToNullableInt(dataRow[InterrogationTable.FieldHeartrate]);
            this.BloodPressureH = BusinessLogic.ConvertToNullableInt(dataRow[InterrogationTable.FieldBloodPressureH]);
            this.BloodPressureL = BusinessLogic.ConvertToNullableInt(dataRow[InterrogationTable.FieldBloodPressureL]);
            this.Address = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldAddress]);
            this.ZipCode = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldZipCode]);
            this.PhoneNumber = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldPhoneNumber]);
            this.Email = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldEmail]);
            this.MainSuit = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldMainSuit]);
            this.CurrentDiseaseCondition = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldCurrentDiseaseCondition]);
            this.DiseasePattern = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldDiseasePattern]);
            this.MedicalHistory = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldMedicalHistory]);
            this.BloodAnalysis = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldBloodAnalysis]);
            this.Defecation = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldDefecation]);
            this.LiverKidny = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldLiverKidny]);
            this.XRay = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldXRay]);
            this.BUltrasonic = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldBUltrasonic]);
            this.Endoscopy = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldEndoscopy]);
            this.Ct = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldCt]);
            this.MagneticResonance = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldMagneticResonance]);
            this.WesternDiagnosis = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldWesternDiagnosis]);
            this.PersonnalHabit = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldPersonnalHabit]);
            this.PersonnalSentiment = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldPersonnalSentiment]);
            this.FamilyHistory = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldFamilyHistory]);
            this.IsLongtermHormones = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldIsLongtermHormones]);
            this.IsAmountAnticatarrhals = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldIsAmountAnticatarrhals]);
            this.DrugAllergy = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldDrugAllergy]);
            this.CurretnDrug = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldCurretnDrug]);
            this.OperationHistory = BusinessLogic.ConvertToString(dataRow[InterrogationTable.FieldOperationHistory]);
            return this;
        }
    }
}
