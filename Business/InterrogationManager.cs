#region RDIFramework.NET-generated
//------------------------------------------------------------------------------
//	RDIFramework.NET，是基于.NET的快速信息化系统开发、整合框架，给用户和开发者最佳的.Net框架部署方案。
//	RDIFramework.NET平台包含基础公共类库、强大的权限控制、模块分配、数据字典、自动升级、各商业级控件库、工作流平台、代码生成器、开发辅助
//工具等，应用系统的各个业务功能子系统，在系统体系结构设计的过程中被设计成各个原子功能模块，各个子功能模块按照业务功能组织成单独的程序集文
//件，各子系统开发完成后，由RDIFramework.NET平台进行统一的集成部署。
//
// 框架官网：http://www.rdiframework.net/
// 框架博客：http://blog.rdiframework.net/
// 版权所有：海南国思软件科技有限公司
// 交流QQ：406590790 
// 邮件交流：406590790@qq.com
// 其他博客：
//      http://www.cnblogs.com/huyong 
//      http://blog.csdn.net/chinahuyong
//------------------------------------------------------------------------------
// <auto-generated>
//	此代码由RDIFramework.NET平台代码生成工具自动生成。
//	运行时版本:4.0.30319.1
//
//	对此文件的更改可能会导致不正确的行为，并且如果
//	重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Data;

namespace RDIFramework.Test
{
    using RDIFramework.BizLogic;
    using RDIFramework.Utilities;

    /// <summary>
    /// InterrogationManager
    /// 
    /// 
    /// 修改纪录
    /// 
    /// 2020-04-09 版本：3.6 yoky 创建主键。
    /// 
    /// 版本：3.6
    /// 
    /// <author>
    /// <name>yoky</name>
    /// <date>2020-04-09</date>
    /// </author>
    /// </summary>
    public partial class InterrogationManager : DbCommonManager
    {
        /// <summary>
        /// 构造函数
        /// </summary>
        public InterrogationManager()
        {
            base.CurrentTableName = InterrogationTable.TableName;
            base.PrimaryKey = "Id";
        }

        /// <summary>
        /// 构造函数
        /// <param name="tableName">指定表名</param>
        /// </summary>
        public InterrogationManager(string tableName)
        {
            base.CurrentTableName = tableName;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        public InterrogationManager(IDbProvider dbProvider): this()
        {
            DBProvider = dbProvider;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="userInfo">用户信息</param>
        public InterrogationManager(UserInfo userInfo) : this()
        {
            UserInfo = userInfo;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        /// <param name="userInfo">用户信息</param>
        public InterrogationManager(IDbProvider dbProvider, UserInfo userInfo) : this(dbProvider)
        {
            UserInfo = userInfo;
        }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="dbProvider">数据库连接</param>
        /// <param name="userInfo">用户信息</param>
        /// <param name="tableName">指定表名</param>
        public InterrogationManager(IDbProvider dbProvider, UserInfo userInfo, string tableName) : this(dbProvider, userInfo)
        {
            base.CurrentTableName = tableName;
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="interrogationEntity">实体</param>
        /// <returns>主键</returns>
        public string Add(InterrogationEntity interrogationEntity)
        {
            return this.AddEntity(interrogationEntity);
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="interrogationEntity">实体</param>
        /// <param name="identity">自增量方式</param>
        /// <param name="returnId">返回主键</param>
        /// <returns>主键</returns>
        public string Add(InterrogationEntity interrogationEntity, bool identity, bool returnId)
        {
            this.Identity = identity;
            this.ReturnId = returnId;
            return this.AddEntity(interrogationEntity);
        }

        /// <summary>
        /// 更新
        /// </summary>
        /// <param name="interrogationEntity">实体</param>
        public int Update(InterrogationEntity interrogationEntity)
        {
            return this.UpdateEntity(interrogationEntity);
        }

        /// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="id">主键</param>
        public InterrogationEntity GetEntity(string id)
        {
            return BaseEntity.Create<InterrogationEntity>(this.GetDT(InterrogationTable.FieldId, id));
        }

        /// <summary>
        /// 添加实体
        /// </summary>
        /// <param name="interrogationEntity">实体</param>
        public string AddEntity(InterrogationEntity interrogationEntity)
        {
            string sequence = string.Empty;
            this.Identity = false; 
            if (interrogationEntity.Id != null)
            {
                sequence = interrogationEntity.Id.ToString();
            }
            SQLBuilder sqlBuilder = new SQLBuilder(DBProvider, this.Identity, this.ReturnId);
            sqlBuilder.BeginInsert(this.CurrentTableName, InterrogationTable.FieldId);
            if (!this.Identity) 
            {
                if (string.IsNullOrEmpty(interrogationEntity.Id)) 
                { 
                    sequence = BusinessLogic.NewGuid(); 
                    interrogationEntity.Id = sequence ;
                }
                sqlBuilder.SetValue(InterrogationTable.FieldId, interrogationEntity.Id);
            }
            else
            {
                if (!this.ReturnId && (DBProvider.CurrentDbType == CurrentDbType.Oracle || DBProvider.CurrentDbType == CurrentDbType.DB2))
                {
                    if (DBProvider.CurrentDbType == CurrentDbType.Oracle)
                    {
                        sqlBuilder.SetFormula(InterrogationTable.FieldId, "SEQ_" + this.CurrentTableName.ToUpper() + ".NEXTVAL ");
                    }
                    if (DBProvider.CurrentDbType == CurrentDbType.DB2)
                    {
                        sqlBuilder.SetFormula(InterrogationTable.FieldId, "NEXT VALUE FOR SEQ_" + this.CurrentTableName.ToUpper());
                    }
                }
                else
                {
                    if (this.Identity && (DBProvider.CurrentDbType == CurrentDbType.Oracle || DBProvider.CurrentDbType == CurrentDbType.DB2))
                    {
                        if (string.IsNullOrEmpty(interrogationEntity.Id))
                        {
                            if (string.IsNullOrEmpty(sequence))
                            {
                                CiSequenceManager sequenceManager = new CiSequenceManager(DBProvider, this.Identity);
                                sequence = sequenceManager.GetSequence(this.CurrentTableName);
                            }
                            interrogationEntity.Id = sequence;
                        }
                        sqlBuilder.SetValue(InterrogationTable.FieldId, interrogationEntity.Id);
                    }
                }
            }
            this.SetEntity(sqlBuilder, interrogationEntity);
            if (this.Identity && (DBProvider.CurrentDbType == CurrentDbType.SqlServer || DBProvider.CurrentDbType == CurrentDbType.Access))
            {
                sequence = sqlBuilder.EndInsert().ToString();
            }
            else
            {
                sqlBuilder.EndInsert();
            }
            return sequence;
        }

        /// <summary>
        /// 更新实体
        /// </summary>
        /// <param name="interrogationEntity">实体</param>
        public int UpdateEntity(InterrogationEntity interrogationEntity)
        {
            SQLBuilder sqlBuilder = new SQLBuilder(DBProvider);
            sqlBuilder.BeginUpdate(this.CurrentTableName);
            this.SetEntity(sqlBuilder, interrogationEntity);
            sqlBuilder.SetWhere(InterrogationTable.FieldId, interrogationEntity.Id);
            return sqlBuilder.EndUpdate();
        }

        /// <summary>
        /// 设置实体
        /// </summary>
        /// <param name="sqlBuilder">sql语句生成器</param>
        /// <param name="interrogationEntity">实体</param>
        private void SetEntity(SQLBuilder sqlBuilder, InterrogationEntity interrogationEntity)
        {
            sqlBuilder.SetValue(InterrogationTable.FieldDate, interrogationEntity.Date);
            sqlBuilder.SetValue(InterrogationTable.FieldPatientName, interrogationEntity.PatientName);
            sqlBuilder.SetValue(InterrogationTable.FieldGender, interrogationEntity.Gender);
            sqlBuilder.SetValue(InterrogationTable.FieldBirthday, interrogationEntity.Birthday);
            sqlBuilder.SetValue(InterrogationTable.FieldAge, interrogationEntity.Age);
            sqlBuilder.SetValue(InterrogationTable.FieldOccupation, interrogationEntity.Occupation);
            sqlBuilder.SetValue(InterrogationTable.FieldIsMerry, interrogationEntity.IsMerry);
            sqlBuilder.SetValue(InterrogationTable.FieldSkinColor, interrogationEntity.SkinColor);
            sqlBuilder.SetValue(InterrogationTable.FieldEthnic, interrogationEntity.Ethnic);
            sqlBuilder.SetValue(InterrogationTable.FieldHight, interrogationEntity.Hight);
            sqlBuilder.SetValue(InterrogationTable.FieldWeight, interrogationEntity.Weight);
            sqlBuilder.SetValue(InterrogationTable.FieldBodyShape, interrogationEntity.BodyShape);
            sqlBuilder.SetValue(InterrogationTable.FieldTemperture, interrogationEntity.Temperture);
            sqlBuilder.SetValue(InterrogationTable.FieldHeartrate, interrogationEntity.Heartrate);
            sqlBuilder.SetValue(InterrogationTable.FieldBloodPressureH, interrogationEntity.BloodPressureH);
            sqlBuilder.SetValue(InterrogationTable.FieldBloodPressureL, interrogationEntity.BloodPressureL);
            sqlBuilder.SetValue(InterrogationTable.FieldAddress, interrogationEntity.Address);
            sqlBuilder.SetValue(InterrogationTable.FieldZipCode, interrogationEntity.ZipCode);
            sqlBuilder.SetValue(InterrogationTable.FieldPhoneNumber, interrogationEntity.PhoneNumber);
            sqlBuilder.SetValue(InterrogationTable.FieldEmail, interrogationEntity.Email);
            sqlBuilder.SetValue(InterrogationTable.FieldMainSuit, interrogationEntity.MainSuit);
            sqlBuilder.SetValue(InterrogationTable.FieldCurrentDiseaseCondition, interrogationEntity.CurrentDiseaseCondition);
            sqlBuilder.SetValue(InterrogationTable.FieldDiseasePattern, interrogationEntity.DiseasePattern);
            sqlBuilder.SetValue(InterrogationTable.FieldMedicalHistory, interrogationEntity.MedicalHistory);
            sqlBuilder.SetValue(InterrogationTable.FieldBloodAnalysis, interrogationEntity.BloodAnalysis);
            sqlBuilder.SetValue(InterrogationTable.FieldDefecation, interrogationEntity.Defecation);
            sqlBuilder.SetValue(InterrogationTable.FieldLiverKidny, interrogationEntity.LiverKidny);
            sqlBuilder.SetValue(InterrogationTable.FieldXRay, interrogationEntity.XRay);
            sqlBuilder.SetValue(InterrogationTable.FieldBUltrasonic, interrogationEntity.BUltrasonic);
            sqlBuilder.SetValue(InterrogationTable.FieldEndoscopy, interrogationEntity.Endoscopy);
            sqlBuilder.SetValue(InterrogationTable.FieldCt, interrogationEntity.Ct);
            sqlBuilder.SetValue(InterrogationTable.FieldMagneticResonance, interrogationEntity.MagneticResonance);
            sqlBuilder.SetValue(InterrogationTable.FieldWesternDiagnosis, interrogationEntity.WesternDiagnosis);
            sqlBuilder.SetValue(InterrogationTable.FieldPersonnalHabit, interrogationEntity.PersonnalHabit);
            sqlBuilder.SetValue(InterrogationTable.FieldPersonnalSentiment, interrogationEntity.PersonnalSentiment);
            sqlBuilder.SetValue(InterrogationTable.FieldFamilyHistory, interrogationEntity.FamilyHistory);
            sqlBuilder.SetValue(InterrogationTable.FieldIsLongtermHormones, interrogationEntity.IsLongtermHormones);
            sqlBuilder.SetValue(InterrogationTable.FieldIsAmountAnticatarrhals, interrogationEntity.IsAmountAnticatarrhals);
            sqlBuilder.SetValue(InterrogationTable.FieldDrugAllergy, interrogationEntity.DrugAllergy);
            sqlBuilder.SetValue(InterrogationTable.FieldCurretnDrug, interrogationEntity.CurretnDrug);
            sqlBuilder.SetValue(InterrogationTable.FieldOperationHistory, interrogationEntity.OperationHistory);
        }

        /// <summary>
        /// 删除实体
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns>影响行数</returns>
        public int Delete(string id)
        {
            return this.Delete(new KeyValuePair<string, object>(InterrogationTable.FieldId, id));
        }
    }
}
